# ==========================================
# ‚ö†Ô∏è CONFIGURACI√ìN VULNERABLE DE NGINX ‚ö†Ô∏è
# ==========================================
# ‚ùå NUNCA USAR EN PRODUCCI√ìN ‚ùå
# Este archivo es solo para prop√≥sitos educativos y demostraci√≥n
# de vulnerabilidades de seguridad
#
# PROP√ìSITO: Demostrar qu√© pasa cuando NO se implementan
# medidas de seguridad en Nginx
# ==========================================

server {
    listen 80;
    server_name localhost;

    # Directorio ra√≠z donde est√°n los archivos est√°ticos
    root /usr/share/nginx/html;
    index index.html;

    # Configuraci√≥n de logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # ‚ö†Ô∏è VULNERABILIDAD #1: Compresi√≥n gzip sin protecci√≥n
    # Problema: Comprime TODO, incluyendo archivos sensibles
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;

    # ‚ö†Ô∏è VULNERABILIDAD #2: Sin bloqueo de archivos de entorno
    # Problema: Archivos .env son accesibles p√∫blicamente
    # Impacto: Exposici√≥n de credenciales, API keys, secretos
    # Ejemplo: curl http://app.com/.env ‚Üí 200 OK

    # ‚ö†Ô∏è VULNERABILIDAD #3: Sin bloqueo de archivos de configuraci√≥n
    # Problema: package.json, docker-compose.yml accesibles
    # Impacto: Revelar dependencias vulnerables, arquitectura
    # Ejemplo: curl http://app.com/package.json ‚Üí 200 OK

    # ‚ö†Ô∏è VULNERABILIDAD #4: Sin bloqueo de repositorio Git
    # Problema: .git/ completo es accesible
    # Impacto: Descarga del repositorio completo, historial, credenciales
    # Ejemplo: wget -r http://app.com/.git/

    # ‚ö†Ô∏è VULNERABILIDAD #5: Sin bloqueo de archivos ocultos
    # Problema: .htaccess, .DS_Store, .vscode/ accesibles
    # Impacto: Revelar estructura del proyecto, configuraci√≥n IDE
    # Ejemplo: curl http://app.com/.htaccess ‚Üí 200 OK

    # ‚ö†Ô∏è VULNERABILIDAD #6: Sin bloqueo de c√≥digo fuente
    # Problema: Archivos .ts, .tsx, .jsx accesibles
    # Impacto: L√≥gica de negocio expuesta, credenciales hardcodeadas
    # Ejemplo: curl http://app.com/src/auth/login.tsx ‚Üí 200 OK

    # ‚ö†Ô∏è VULNERABILIDAD #7: Sin bloqueo de source maps
    # Problema: Archivos .map permiten leer c√≥digo sin minificar
    # Impacto: Revelar c√≥digo original, comentarios, nombres de variables
    # Ejemplo: curl http://app.com/assets/index.js.map ‚Üí 200 OK

    # ‚ö†Ô∏è VULNERABILIDAD #8: Sin bloqueo de directorios sensibles
    # Problema: node_modules/, src/, public/ accesibles
    # Impacto: Acceso a dependencias, c√≥digo fuente completo
    # Ejemplo: curl http://app.com/node_modules/react/package.json ‚Üí 200 OK

    # ‚ö†Ô∏è CONFIGURACI√ìN VULNERABLE: Solo regla b√°sica
    # Esta configuraci√≥n permite acceder a CUALQUIER archivo en /usr/share/nginx/html
    # try_files intenta servir el archivo directamente si existe
    location / {
        try_files $uri $uri/ /index.html;
        
        # ‚ö†Ô∏è VULNERABILIDAD #9: Sin headers de seguridad
        # No hay X-Content-Type-Options, X-Frame-Options, CSP, etc.
    }

    # ‚ö†Ô∏è VULNERABILIDAD #10: Sin rate limiting
    # Problema: Permite fuerza bruta ilimitada
    # Impacto: Ataques DoS, escaneo de directorios

    # ‚ö†Ô∏è VULNERABILIDAD #11: Sin timeout configurado
    # Problema: Conexiones pueden quedar abiertas indefinidamente

    # ‚ö†Ô∏è VULNERABILIDAD #12: Sin validaci√≥n de m√©todos HTTP
    # Problema: Acepta PUT, DELETE, TRACE, etc.
}

# ==========================================
# RESUMEN DE VULNERABILIDADES:
# ==========================================
# 1. ‚ùå Archivos .env accesibles (CR√çTICO)
# 2. ‚ùå Repositorio .git/ descargable (CR√çTICO)
# 3. ‚ùå Archivos de configuraci√≥n expuestos (ALTO)
# 4. ‚ùå C√≥digo fuente TypeScript accesible (ALTO)
# 5. ‚ùå Source maps disponibles (MEDIO)
# 6. ‚ùå Archivos ocultos accesibles (MEDIO)
# 7. ‚ùå node_modules/ expuesto (MEDIO)
# 8. ‚ùå Sin headers de seguridad (MEDIO)
# 9. ‚ùå Sin rate limiting (BAJO)
# 10. ‚ùå Sin validaci√≥n de m√©todos HTTP (BAJO)
#
# NIVEL DE RIESGO GLOBAL: üî¥ CR√çTICO (95/100)
# ==========================================

# ==========================================
# ARCHIVOS QUE PUEDEN SER ACCEDIDOS:
# ==========================================
# curl http://localhost/.env                          ‚Üí 200 OK ‚ùå
# curl http://localhost/.env.local                    ‚Üí 200 OK ‚ùå
# curl http://localhost/.env.production               ‚Üí 200 OK ‚ùå
# curl http://localhost/.git/config                   ‚Üí 200 OK ‚ùå
# curl http://localhost/.git/HEAD                     ‚Üí 200 OK ‚ùå
# curl http://localhost/.git/logs/HEAD                ‚Üí 200 OK ‚ùå
# curl http://localhost/package.json                  ‚Üí 200 OK ‚ùå
# curl http://localhost/package-lock.json             ‚Üí 200 OK ‚ùå
# curl http://localhost/tsconfig.json                 ‚Üí 200 OK ‚ùå
# curl http://localhost/vite.config.ts                ‚Üí 200 OK ‚ùå
# curl http://localhost/docker-compose.yml            ‚Üí 200 OK ‚ùå
# curl http://localhost/src/main.tsx                  ‚Üí 200 OK ‚ùå
# curl http://localhost/src/api/todosApi.ts           ‚Üí 200 OK ‚ùå
# curl http://localhost/src/auth/keycloak.ts          ‚Üí 200 OK ‚ùå
# curl http://localhost/assets/index.js.map           ‚Üí 200 OK ‚ùå
# curl http://localhost/node_modules/react/index.js   ‚Üí 200 OK ‚ùå
# curl http://localhost/.htaccess                     ‚Üí 200 OK ‚ùå
# curl http://localhost/.DS_Store                     ‚Üí 200 OK ‚ùå
# curl http://localhost/.vscode/settings.json         ‚Üí 200 OK ‚ùå
# curl http://localhost/README.md                     ‚Üí 200 OK ‚ùå
# curl http://localhost/Dockerfile                    ‚Üí 200 OK ‚ùå
# ==========================================

# ==========================================
# PARA USAR ESTA CONFIGURACI√ìN VULNERABLE:
# ==========================================
# 1. Construir imagen con esta config:
#    docker build -f Dockerfile.vulnerable -t todo-front:vulnerable .
#
# 2. Ejecutar contenedor vulnerable:
#    docker run -d -p 8081:80 --name todo-vulnerable todo-front:vulnerable
#
# 3. Probar vulnerabilidades:
#    ./test-security.sh http://localhost:8081
#
# 4. Comparar con versi√≥n segura:
#    docker run -d -p 8080:80 --name todo-secure todo-front:latest
#    ./test-security.sh http://localhost:8080
# ==========================================
