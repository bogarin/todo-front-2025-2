version: '3.9'

services:
  todo-secure:
    container_name: todo-front-secure
    build:
      context: .
      dockerfile: Dockerfile
      args:
        VITE_KEYCLOAK_URL: 'http://localhost:8081'
        VITE_KEYCLOAK_REALM: 'itmexicali'
        VITE_KEYCLOAK_CLIENT_ID: 'todo-services'
        VITE_API_BASE_URL: 'http://localhost:8080/api/v1'
    ports:
      - "8083:80"
    restart: unless-stopped
    labels:
      - "description=Versión SEGURA con todas las protecciones"
      - "security=HIGH"
    depends_on:
      - todo-back-app
    networks:
      - todo-network

  postgres:
    image: postgres:17.4-alpine
    container_name: todo-postgres-db
    environment:
      POSTGRES_USER: todo_user
      POSTGRES_PASSWORD: todo_password
      POSTGRES_DB: todo_db_v2
      # Configuración adicional para PostgreSQL
      POSTGRES_INITDB_ARGS: "--encoding=UTF8"
      TZ: America/Mexico_City
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - todo-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U todo_user -d todo_db_v2"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.4
    container_name: todo-keycloak
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_LOG_LEVEL: info
      TZ: America/Mexico_City
      # Base de datos Postgres
      KC_DB: postgres
      KC_DB_USERNAME: todo_user
      KC_DB_PASSWORD: todo_password
      KC_DB_URL_HOST: postgres
      KC_DB_URL_PORT: 5432
      KC_DB_URL_DATABASE: todo_db_v2
      KC_DB_SCHEMA: keycloak
    command: >-
      start-dev
      --http-port=8081
    ports:
      - "8081:8081"
    volumes:
      - keycloak-data:/opt/keycloak/data
      # Si deseas importar un realm automáticamente, descomenta y añade tu export JSON
      # - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm-export.json:ro
      # y agrega "--import-realm" al comando anterior
    networks:
      - todo-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  todo-back-app:
    image: todo-back-app-2025
    container_name: todo-back-app
    environment:
        # Configuración de base de datos
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/todo_db_v2
        SPRING_DATASOURCE_USERNAME: todo_user
        SPRING_DATASOURCE_PASSWORD: todo_password
        SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
        
        # Configuración de JPA/Hibernate
        SPRING_JPA_HIBERNATE_DDL_AUTO: update
        SPRING_JPA_SHOW_SQL: false
        SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL: true
        SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT: org.hibernate.dialect.PostgreSQLDialect
        # Configuración de CORS
        CORS_ALLOWED_ORIGINS: http://localhost:8083
        # Configuración del servidor
        SERVER_PORT: 8080
        
        # Optimización de JVM para contenedor
        JAVA_OPTS: >-
          -XX:+UseContainerSupport
          -XX:MaxRAMPercentage=75.0
          -XX:InitialRAMPercentage=50.0
          -Djava.security.egd=file:/dev/./urandom
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      # keycloak: { condition: service_started } # habilita si tu backend depende de Keycloak
    networks:
      - todo-network

networks:
  todo-network:
    driver: bridge

volumes:
  postgres-data:
  keycloak-data: